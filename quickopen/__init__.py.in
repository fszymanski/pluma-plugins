# Copyright (C) 2023 Filip Szyma≈Ñski <fszymanski.pl@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#

import gi

gi.require_version("PeasGtk", "1.0")
gi.require_version("Pluma", "1.0")
from gi.repository import Gio, GObject, Gtk, PeasGtk, Pluma

resource = Gio.resource_load("@PKG_DATA_DIR@/quickopen.gresource")
Gio.Resource._register(resource)

from .filechooserdialog import FileChooserDialog

UI_STR = """
<ui>
    <menubar name='MenuBar'>
        <menu name='FileMenu' action='File'>
            <placeholder name='FileOps_2'>
                <menuitem name='FileQuickOpenMenu' action='FileQuickOpen'/>
            </placeholder>
        </menu>
    </menubar>
</ui>
"""


class QuickOpenPlugin(GObject.Object, Pluma.WindowActivatable):
    __gtype_name__ = "QuickOpenPlugin"

    window = GObject.Property(type=Pluma.Window)

    def __init__(self):
        super().__init__()

    def do_activate(self):
        action = Gtk.Action("FileQuickOpen", label="Quick Open", icon_name="document-open")
        action.connect("activate", lambda _: self.search_for_files())

        self.action_group = Gtk.ActionGroup("PlumaQuickOpenPluginActions")
        self.action_group.add_action_with_accel(action, "<Ctrl><Alt>o")

        manager = self.window.get_ui_manager()
        manager.insert_action_group(self.action_group, -1)
        self.merge_id = manager.add_ui_from_string(UI_STR)

    def do_deactivate(self):
        manager = self.window.get_ui_manager()
        manager.remove_ui(self.merge_id)
        manager.remove_action_group(self.action_group)
        manager.ensure_update()

    def do_update_state(self):
        pass

    def search_for_files(self):
        FileChooserDialog(self.window)


class QuickOpenConfigurable(GObject.Object, PeasGtk.Configurable):
    __gtype_name__ = "QuickOpenConfigurable"

    def __init__(self):
        super().__init__()

    def do_create_configure_widget(self):
        settings = Gio.Settings("org.mate.pluma.plugins.quickopen")

        builder = Gtk.Builder.new_from_resource("/org/mate/pluma/plugins/quickopen/ui/configurationbox.ui")

        recursive_search_check = builder.get_object("recursive_search_check")
        recursive_search_check.set_active(settings.get_boolean("recursive-search"))
        recursive_search_check.connect("toggled", lambda b: settings.set_boolean("recursive-search", b.get_active()))

        return builder.get_object("configuration_box")
